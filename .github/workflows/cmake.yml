name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: ffmpeg-dependencies
      run: |
        sudo apt update && sudo apt install -y g++ \
          curl \
          unzip \
          tar \
          yasm \
          make \
          build-essential \
          libx11-dev \
          libpthread-stubs0-dev \
          cmake
  
    - name: run-vcpkg
      uses: lukka/run-vcpkg@v6.0
      id: runvcpkg
      with:
        vcpkgArguments: ffmpeg:x64-linux catch2:x64-linux 
        vcpkgDirectory: ${{ runner.workspace }}/ffmpeg-cpp/dependencies/vcpkg/
        vcpkgTriplet: x64-linux
        appendedCacheKey: 'vcpkg-dependencies'
    
    - name: Run CMake with Ninja
      uses: lukka/run-cmake@v3
      id: runcmake
      with:
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildWithCMakeArgs: '-- -v'
    # - name: update submodule vcpkg
    #   working-directory: ${{runner.workspace}}/ffmpeg-cpp
    #   run: git submodule update --init

    # - name: Cache vcpkg dependencies
    #   id: cache-dependencies
    #   uses: actions/cache@v2
    #   with:
    #     path: ${{runner.workspace}}/ffmpeg-cpp/dependencies/vcpkg/installed
    #     key: ${{ runner.os }}-dependencies

    # - name: Build Dependencies
    #   shell: bash
    #   working-directory: ${{runner.workspace}}/ffmpeg-cpp
    #   if: steps.cache-dependencies.output.cache-hit != 'true'
    #   run: ./build-all.sh build-dependencies.sh
    #   #run: ls -lah
    #   # Some projects don't allow in-source building, so create a separate build directory
    #   # We'll use this as our working directory for all subsequent commands
    #   # run: cmake -E make_directory ${{runner.workspace}}/build

    # - name: build and test
    #   # Use a bash shell so we can use the same syntax for environment variable
    #   # access regardless of the host operating system
    #   shell: bash
    #   working-directory: ${{runner.workspace}}/ffmpeg-cpp
    #   run: ./build-all.sh build-libraries.sh
    #   # Note the current convention is to use the -S and -B options here to specify source 
    #   # and build directories, but this is only available with CMake 3.13 and higher.  
    #   # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
    #   # run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    # #- name: Build
    # #  working-directory: ${{runner.workspace}}/build
    # #  shell: bash
    #   # Execute the build.  You can specify a specific target with "--target <NAME>"
    #   # run: cmake --build . --config $BUILD_TYPE

    # #- name: Test
    # #  working-directory: ${{runner.workspace}}/build
    # #  shell: bash
    #   # Execute tests defined by the CMake configuration.  
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   # run: ctest -C $BUILD_TYPE
